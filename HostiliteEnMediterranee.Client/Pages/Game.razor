@page "/game"
@inject HttpClient Http
@using HostiliteEnMediterranee.Models

<PageTitle>Bataille Navale</PageTitle>

@if (gameState == null)
{
    <p>Loading game...</p>
}
else
{
    <h1>Game: @gameState.GameStatus</h1>
    <div class="gameboard">
        <div>
            <h2>@gameState.CurrentPlayer.Name's Grid</h2>
            <div class="grid">
                @for (int i = 0; i < gameState.CurrentPlayer.Grid.Length; i++)
                {   
                    <div class="row">
                        @for (int j = 0; j < gameState.CurrentPlayer.Grid[i].Length; j++)
                        {
                            var cell = gameState.CurrentPlayer.Grid[i][j];
                            var row = i;
                            var col = j; 
                            <span class="cell @(cell == 'X' ? "hit" : cell == 'O' ? "miss" : "sea")" @onclick="() => CellClicked(row, col)"></span>
                        }
                    </div>
                }   
            </div>
        </div>
        <div>
            <h2>@gameState.OpponentPlayer.Name's Grid</h2>
            <div class="grid">
                @for (int i = 0; i < gameState.OpponentPlayer.Grid.Length; i++)
                {   
                    <div class="row">
                        @for (int j = 0; j < gameState.OpponentPlayer.Grid[i].Length; j++)
                        {
                            var cell = gameState.OpponentPlayer.Grid[i][j];
                            var row = i; 
                            var col = j; 
                            <span class="cell @(cell == 'X' ? "hit" : cell == 'O' ? "miss" : "sea")" @onclick="() => CellClicked(row, col)"></span>
                        }
                    </div>
                }   
            </div>
        </div>
    </div>
}

<style>
.grid{
    display: flex;
    background-image: url('assets/sea.jpg');
    background-size: cover;
    width: fit-content;
}

.cell {
    width: 30px;
    height: 30px;
    display: flex;
    border: 1px solid rgba(255, 255, 255, 0.2);
    align-items: center;
    justify-content: center;
    cursor: pointer;
    background-size: cover;
}


.cell.hit {
    background-image: url('assets/hit.png');
    cursor: not-allowed;
}

.cell.miss {
    background-image: url('assets/miss.png');
    cursor: not-allowed;
}

.cell.sea:hover {
    background-color: rgba(255, 255, 255, 0.5);
}
</style>

@code {
    private GameStateDto gameState;

    protected override async Task OnInitializedAsync()
    {
        await FetchGame();
    }

    private async Task FetchGame()
    {
        try
        {
            gameState = await Http.GetFromJsonAsync<GameStateDto>("sample-data/gameState.json");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private void CellClicked(int row, int col)
    {
        Console.WriteLine($"Cell at ({row}, {col}) clicked.");
        // Here you could add logic to handle the click, such as checking the cell's value, updating game state, etc.
    }
}
