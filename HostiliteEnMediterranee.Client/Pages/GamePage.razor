@page "/game"

<div class="gameboard">
    <div class="opponent-grid-container">
        <div class="grid">
            @for (int col = 0; col < GameState.GridSize; col++)
            {
                <div class="row">
                    @for (int row = 0; row < GameState.GridSize; row++)
                    {

                        var cell = GameState.OpponentGrid[row, col];
                        var c_row = row;
                        var c_col = col;
                        <span class="cell opponent @(cell == false ? "miss" : cell == true && !GameState.CellIsSunk(row, col) ? "hit" : "sea")"
                              @onclick="() => CellClicked(c_row, c_col)">
                        </span>
                    }
                </div>
            }
        </div>
        <div class="boats">
            @foreach (var ship in GameState.OpponentSunkShips)
            {
                var topPosition = ship.Coordinates[0].Row * (100 / GameState.GridSize) + 1;
                if (ship.Orientation == "horizontal")
                {
                    topPosition += (100 / GameState.GridSize) - 1;
                }
                var leftPosition = ship.Coordinates[0].Column * (100 / GameState.GridSize) + 1;
                var shipWidth = (100 / GameState.GridSize) - 2;
                var shipHeight = ship.Size * (100 / GameState.GridSize) - 2;


                <div class="ship @(ship.Orientation)"
                     style="
                    position: absolute;
                    top: @(topPosition)%;
                    left: @(leftPosition)%;
                    width: @(shipWidth)%;
                    height: @(shipHeight)%;
                    transform: @(ship.Orientation == "horizontal" ? "rotate(-90deg)" : "none");
                    transform-origin: top left;
                    filter: blur(3px) saturate(0.5);
                             ">
                    <img src="assets/ship/ship-@(ship.Model).png" alt="Ship" />
                </div>

                foreach (var coord in ship.Coordinates)
                {
                    var top = coord.Row * (100 / GameState.GridSize) + 1;
                    var left = coord.Column * (100 / GameState.GridSize) + 1;
                    var width = (100 / GameState.GridSize) - 2;
                    var height = (100 / GameState.GridSize) - 2;
                    <img src="assets/bubbles.gif" style="position: absolute;
                                                    top: @(top)%;
                                                    left: @(left)%;
                                                    width: @(width)%;
                                                    height: @(height)%;
                                                    z-index: 10;" />
                }
           
            }

        </div>
    </div>
    <div class="player-grid-container">
        <div class="grid">
            @for (int col = 0; col < GameState.GridSize; col++)
            {
                <div class="row">
                    @for (int row = 0; row < GameState.GridSize; row++)
                    {
                        var cell = GameState.PlayerGrid[row, col];
                        <span class="cell @(cell == 'O' ? "miss" : "sea")">
                        </span>
                    }
                </div>
            }
        </div>
        <div class="boats">
            @foreach (var ship in GameState.PlayerShips)
            {
                var topPosition = ship.Coordinates[0].Row * (100 / GameState.GridSize) + 1;
                if (ship.Orientation == "horizontal")
                {
                    topPosition += (100 / GameState.GridSize) - 1;
                }
                var leftPosition = ship.Coordinates[0].Column * (100 / GameState.GridSize) + 1;
                var shipWidth = (100 / GameState.GridSize) - 2;
                var shipHeight = ship.Size * (100 / GameState.GridSize) - 2;


                <div class="ship @(ship.Orientation)"
                     style="
                    position: absolute;
                    top: @(topPosition)%;
                    left: @(leftPosition)%;
                    width: @(shipWidth)%;
                    height: @(shipHeight)%;
                    transform: @(ship.Orientation == "horizontal" ? "rotate(-90deg)" : "none");
                    transform-origin: top left;
                    filter: @(ship.IsSinked? "blur(3px) saturate(0.5)" :"");
                         ">
                    <img src="assets/ship/ship-@(ship.Model).png" alt="Ship" />
                </div>

                if (ship.HitCoordinates.Count != 0)
                {
                    foreach (var coord in ship.HitCoordinates)
                    {
                        var top = coord.Row * (100 / GameState.GridSize) + 1;
                        var left = coord.Column * (100 / GameState.GridSize) + 1;
                        var width = (100 / GameState.GridSize) - 2;
                        var height = (100 / GameState.GridSize) - 2;
                        <img src=@(ship.IsSinked ? "assets/bubbles.gif" : "assets/fire.gif") style="position: absolute;
                                                        top: @(top)%;
                                                        left: @(left)%;
                                                        width: @(width)%;
                                                        height: @(height)%;
                                                        z-index: 10;" />
                    }
                }
            }
    
        </div>
    </div>
    <h1>
        @(GameState.GameStatus == GameStatusDto.Over ? GameState.PlayerWin ? "You win" : "You Lose" : "")
    </h1>

</div>

@code {
    [Inject] private GameState GameState { get; set; }

    private async void CellClicked(int row, int col)
    {
        await GameState.SendShootAsync(row, col);
        StateHasChanged();
    }
}

<style>
    .gameboard {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        position: relative;
    }

    .grid {
        display: grid;
        grid-template-columns: repeat(@(GameState.GridSize), 1fr);
        grid-template-rows: repeat(@(GameState.GridSize), 1fr);
        background-image: url('assets/sea.jpg');
        background-size: cover;
        position: relative;
        width: 100%;
        height: 100%;
    }

    .player-grid-container {
        position: relative;
        width: 40vh;
        height: 40vh;
    }

    .opponent-grid-container {
        position: relative;
        width: 50vh;
        height: 50vh;
        margin-bottom: 20px;
    }

    .boats {
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .cell {
        width: 100%;
        height: 100%;
        display: flex;
        background-size: cover;
        background-position: center;
        z-index: 5;
    }

        .cell.hit {
            background-image: url('assets/hit.png');
            cursor: not-allowed;
            animation: explode 0.3s ease-in-out
        }

        .cell.miss {
            background-image: url('assets/miss.png');
            cursor: not-allowed;
            animation: splash 0.3s ease-in-out;
        }

        .cell.opponent.sea:hover {
            background-color: rgba(255, 255, 255, 0.5);
        }

    .ship {
        position: absolute;
    }

        .ship img {
            width: 100%;
            height: 100%;
        }
</style>